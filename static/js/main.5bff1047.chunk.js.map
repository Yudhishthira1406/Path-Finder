{"version":3,"sources":["components/Cell.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","useContext","texts","action","endparam","start","setstart","end","setend","wallcontext","Wall","setWall","walldowncotext","walldown","setwalldown","id","row","col","className","onClick","r","document","getElementById","c","style","backgroundColor","prevState","state","wall","console","log","onMouseDown","onMouseOver","onMouseUp","React","createContext","Grid","useState","matrix","setmatrix","useEffect","mat","i","j","push","Provider","value","map","cell","App","sleep","ms","Promise","resolve","setTimeout","initAction","initwall","setaction","initstart","startcell","setstartcell","endcell","setendcell","speed","setspeed","a","alert","visited","queue","k","length","v","shift","dir","x","path","unshift","y","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5bff1047.chunk.js","sourcesContent":["import React, { useEffect, useContext , useState} from 'react'\n\nimport {texts, endparam, wallcontext} from '../App'\nimport { walldowncotext } from './Grid'\n\nfunction Cell(props) {\n\n    const [action, setaction] = useContext(texts)\n    const [start, setstart, end, setend] = useContext(endparam)\n    const [Wall, setWall] = useContext(wallcontext)\n    const [walldown, setwalldown] = useContext(walldowncotext)\n    \n   \n    \n    var id = `${props.row}-${props.col}`\n\n    \n\n    const clickHandler = () => {\n\n        \n        if(action.start) {\n            if(start.r !== -1){document.getElementById(`${start.r}-${start.c}`).style.backgroundColor = \"whitesmoke\"}\n            setstart(\n                {r : props.row,\n                c : props.col},\n                \n            ) \n            document.getElementById(`${props.row}-${props.col}`).style.backgroundColor = \"blue\"\n            if(Wall[props.row][props.col]) {\n                setWall((prevState) => {\n                    let state = prevState\n                    state[props.row][props.col] = 0\n                    return state\n                })\n            }\n            \n            \n        }\n        if(action.end) {\n            if(end.r !== -1) document.getElementById(`${end.r}-${end.col}`).style.backgroundColor = \"whitesmoke\"\n            setend(\n                {\n                    r : props.row,\n                    c : props.col\n                }\n            )\n            document.getElementById(`${props.row}-${props.col}`).style.backgroundColor = \"red\"\n            if(Wall[props.row][props.col]) {\n                setWall((prevState) => {\n                    let state = prevState\n                    state[props.row][props.col] = 0\n                    return state\n                })\n            }\n        }\n        if(action.wall) {\n            if(!((start.r === props.row && start.c === props.col) || (end.r === props.row && end.c === props.col)) ) \n\n            {setWall((prevState) => {\n                let state = prevState\n                if(state[props.row][props.col]) {\n                    state[props.row][props.col] = 0\n                    document.getElementById(`${props.row}-${props.col}`).style.backgroundColor = \"whitesmoke\"\n                }\n                else {\n                    state[props.row][props.col] = 1\n                    document.getElementById(`${props.row}-${props.col}`).style.backgroundColor = \"black\"\n                }\n                return state\n            })}\n        }\n        console.log(\"Clicked\", props.row, props.col)\n    }\n    \n\n    const overhandler = () => {\n        if(!((start.r === props.row && start.c === props.col) || (end.r === props.row && end.c === props.col)) ){\n            if(walldown) {\n                setWall((prevState) => {\n                    let state = prevState\n                    state[props.row][props.col] = 1\n                    return state\n                })\n                document.getElementById(`${props.row}-${props.col}`).style.backgroundColor = \"black\" \n            }\n        }\n    }\n    \n    return (\n        <div className = \"cell\" \n        id = {id}\n        onClick = {clickHandler} \n        onMouseDown = {() => {\n            if(action.wall) {\n                setwalldown(true)\n            }\n        }}\n        onMouseOver = {overhandler}\n        onMouseUp = {() => setwalldown(false)}\n         >\n            \n        </div>\n    )\n}\n\nexport default Cell\n","import React, {useEffect, useState} from 'react'\nimport './css/Grid.css'\nimport Cell from './Cell'\n\n\nexport const walldowncotext = React.createContext()\n\nfunction Grid() {\n    \n    const [matrix, setmatrix] = useState([])\n    \n    const [walldown, setwalldown] = useState(false)\n    useEffect(() => {\n        let mat = []\n        for(let i = 0; i <= 20; ++i) {\n            let row = []\n            for(let j = 0; j <= 50; ++j) {\n                row.push({r : i, c : j})\n            }\n            mat.push(row)\n        }\n        setmatrix(mat)\n       \n    }, [])\n\n    \n    return (\n        <div className = \"grid-container\">\n            <walldowncotext.Provider value = {[walldown, setwalldown]}>\n            <table>\n            {matrix.map(\n                (row) => (\n                    <tr>\n                    {row.map(\n                        (cell) => \n                            <th><Cell row = {cell.r} col = {cell.c}></Cell> </th>\n                        \n                    )}\n                    </tr>\n                )\n            )}\n        </table>\n            </walldowncotext.Provider>\n        \n        </div>\n    )\n}\n\nexport default Grid\n","import React, { useState, useEffect } from 'react';\n\nimport './App.css';\n\nimport Grid from './components/Grid';\n\nexport const texts = React.createContext();\nexport const endparam = React.createContext();\nexport const wallcontext = React.createContext();\nexport const visitcontext = React.createContext();\nexport const visitrecent = React.createContext();\n\nfunction App() {\n\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  const initAction = {\n    start : false,\n    end : false,\n    wall : false\n  }\n\n  let initwall = []\n  \n  for(let i = 0; i <= 20; ++i) {\n    let row = []\n    for(let j = 0; j <= 50; ++j) {\n      row.push(0)\n    }\n    initwall.push(row)\n  }\n  const [Wall, setWall] = useState(initwall)\n  \n  \n\n  const [action, setaction] = useState(initAction)\n  \n\n  const initstart = {r : -1, c : -1}\n  \n  const [startcell, setstartcell] = useState(initstart)\n  const [endcell, setendcell] = useState(initstart)\n\n  const [speed, setspeed] = useState(20)\n  \n  \n\n  async function bfs() {\n    if(startcell.r === -1 || endcell.r === -1) {\n      alert(\"Not enough parameters specified\")\n      return;\n    }\n    setaction(initAction)\n    let visited = initwall\n    \n    let queue = [[startcell.r, startcell.c]]\n    \n    visited[startcell.r][startcell.c] = [-1, -1]\n    \n    var k = 0\n    while(queue.length) {\n      let v = queue[0]\n      console.log(v)\n      queue.shift()\n      if(v[0] !== startcell.r || v[1] !== startcell.c) document.getElementById(`${v[0]}-${v[1]}`).style.backgroundColor = \"aqua\"\n      // await sleep(100)\n      var dir;\n      for(dir of [[1, 0], [0, 1], [0, -1], [-1, 0]]) {\n        var r = v[0] + dir[0]\n        var c = v[1] + dir[1]\n        \n        if(r >= 0 && r <= 20 && c >= 0 && c <= 50 && !visited[r][c] && !Wall[r][c]) {\n          visited[r][c] = v\n         \n          if(r === endcell.r && c === endcell.c) {k = 1; break;}\n          document.getElementById(`${r}-${c}`).style.backgroundColor = \"#24fc03\"\n          await sleep(speed)\n          \n          queue.push([r, c])\n          \n          // setTimeout(updateparent(v[0], v[1], r, c), 2000)\n        }\n        \n        \n      }\n      if(k) break;\n    }\n    for(var x of queue) {\n      document.getElementById(`${x[0]}-${x[1]}`).style.backgroundColor = \"aqua\"\n    }\n    if(!visited[endcell.r][endcell.c]) {\n      alert(\"pathnot found\")\n      return;\n    }\n    let path = []\n    let v = visited[endcell.r][endcell.c]\n    while(visited[v[0]][v[1]][0] !== -1) {\n      path.unshift(v)\n      v = visited[v[0]][v[1]]\n    }\n    console.log(path)\n    for(var y of path) {\n      document.getElementById(`${y[0]}-${y[1]}`).style.backgroundColor = \"yellow\"\n      await sleep(25)\n    }\n\n  }\n\n  const startHandler = () => {\n    setaction(() =>\n      {\n        return {...initAction,\n        start : true\n        }\n      }\n    )\n    \n  } \n\n  const endHandler = () => {\n    setaction(() =>\n      {\n        return {...initAction,\n        end : true\n        }\n      }\n    )\n    console.log(action)\n  } \n\n  const reset = () => {\n    setaction(initAction)\n    setstartcell(initstart)\n    setendcell(initstart)\n    setWall(initwall)\n    for(var i = 0; i <= 20; ++i) {\n      for(var j = 0; j <= 50; ++j) {\n        document.getElementById(`${i}-${j}`).style.backgroundColor = \"whitesmoke\"\n      }\n    }\n  }\n\n  const wallHandler = () => {\n    setaction(\n      () =>\n      {\n        return {\n          ...initAction,\n          wall : true\n        }\n      }\n    )\n  }\n\n    useEffect(\n      () => {\n        console.log(action)\n        \n      }, [action]\n    )\n  \n  return (\n    <div className = \"App\">\n      <div className = \"speed-container\">\n        <button onClick = {() => setspeed(2)}>Fast</button>\n        <button onClick = {() => setspeed(20)}>medium</button>\n        <button onClick = {() => {setspeed(100)}}>Slow</button>\n      </div>\n      <div className = \"button-container\">\n        \n        <button onClick = {startHandler}>Select start cell</button>\n        <button onClick = {endHandler}>Select end cell</button>\n        <button onClick = {wallHandler}>Select walls</button>\n        <button onClick = {bfs}>Find Shortest Path</button>\n        <button onClick = {reset}>Reset</button>\n      </div>\n      <texts.Provider value = {[action, setaction]}>\n        <endparam.Provider value = {[startcell, setstartcell, endcell, setendcell]}>\n          <wallcontext.Provider value = {[Wall, setWall]}>\n            \n              <Grid />\n            \n          </wallcontext.Provider>\n        </endparam.Provider>\n      </texts.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}